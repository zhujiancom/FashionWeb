package com;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

public class VOFactory {
    @SuppressWarnings("rawtypes")
    public static <T> T getObserverVO(Class<T> clazz,Object...params){
        try {
            if(params.length > 0){
                Class[] paramTypes = new Class[params.length];
                for(int i=0;i<params.length;i++){
                    paramTypes[i] = params[i].getClass();
                }
                Constructor<T> c = clazz.getConstructor(paramTypes);
                return c.newInstance(params);
            }else{
                Constructor<T> c = clazz.getConstructor();
                return c.newInstance();
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new RuntimeException();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
            throw new RuntimeException();
        } catch (InstantiationException e) {
            e.printStackTrace();
            throw new RuntimeException();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
            throw new RuntimeException();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new RuntimeException();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
            throw new RuntimeException();
        } catch(Exception e){
            throw new RuntimeException();
        }
    }
}
